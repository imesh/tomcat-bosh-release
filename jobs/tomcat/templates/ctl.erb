#!/bin/bash
set +e
set -xv

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  my_ip = discover_external_ip
%>

SCRIPT_DIR=$(dirname $0  )
JOB_DIR=$SCRIPT_DIR/..

RUN_DIR=/var/vcap/sys/run/tomcat
LOG_DIR=/var/vcap/sys/log/tomcat
PIDFILE=${RUN_DIR}/pid


mkdir -p $RUN_DIR $LOG_DIR
chown -R vcap:vcap $RUN_DIR $LOG_DIR

mkdir -p /var/vcap/store/tomcat/data
export TOMCAT_DATA_DIR=/var/vcap/store/tomcat/data/tomcat

export OPENJDK_HOME=/var/vcap/packages/openjdk/
export TOMCAT_PKG_HOME=/var/vcap/packages/tomcat/
export TOMCAT_SERVER_PACKAGE=/var/vcap/packages/tomcat/

# Not relying on network name to arrive at hostip
# Set the ip to HOSTNAME to avoid listener getting bound to some internal only hostname
export HOSTNAME=<%="#{my_ip}"%>
export TOMCAT_HOST=<%="#{my_ip}"%>

# Here set any environment variables for your software
export TOMCAT_SERVER_PORT=<%=properties.tomcat.listen_port %>
export TOMCAT_SERVER_RUN_SCRIPT=<%=properties.tomcat.run_script %>
export MIN_HEAP=<%=properties.tomcat.memory.min_heap %>
export MAX_HEAP=<%=properties.tomcat.memory.max_heap %>
export MAX_PERMGEN=<%=properties.tomcat.memory.max_permgen %>
export JAVA_OPTS=" -Xmx${MAX_HEAP}m -Xms${MIN_HEAP}m -XX:MaxPermSize=${MAX_PERMGEN}m"

export DEBUG_LOG=$LOG_DIR/tomcat.log

touch $DEBUG_LOG
chmod -R 755 /var/vcap/sys
chmod 777 $DEBUG_LOG

function log_debug() {
  echo `date` $1 >> $DEBUG_LOG
}

log_debug "Kicking off ctl script as `whoami` with $1"

case $1 in

  start)
    # Kill the previously running instance if any
    kill -9 `cat $PIDFILE`

    pushd ${OPENJDK_HOME}
    archive=`ls open*gz`
    tar zxvf $archive
    if [[ -d bin && `bin/java -Xmx64M -version 2>&1` =~ "OpenJDK 64-Bit Server" && $? == 0 ]]; then
      export JRE_HOME=${OPENJDK_HOME}
      export JAVA_BINARY=${JAVA_HOME}/bin/java
      cd ..
    else
      log_debug "JVM is not properly packaged"
      exit 1
    fi
    log_debug "Located Java Binary at: ${JAVA_BINARY}"

    pushd ${TOMCAT_PKG_HOME}
    ls $TOMCAT_PKG_HOME/apache* | grep -v tgz
    does_tomcat_directory=$?
    if [ "$tomcat_directory" != "0"  ]; then
      archive=`ls tom*gz`
      tar zxvf $archive
    fi
    cd apache*
    TOMCAT_HOME=`pwd`
    mkdir webapps
    WEB_ARCHIVE_DIR=${TOMCAT_HOME}/webapps

    pushd ${TOMCAT_SERVER_PACKAGE}
    archive=`ls lib/*ar`
    cp $archive ${WEB_ARCHIVE_DIR}

    # Here any config files your application needs for ex:
    # conf_file=`ls $JOB_DIR/config/*.xml`
    # cp ${conf_file} ${TOMCAT_HOME}/conf

    # Here add any database driver your application needs for ex:
    # pushd ${POSTGRES_DRIVER_HOME}
    # driver_file=`ls postgres*.jar`
    # cp ${driver_file} ${TOMCAT_HOME}/lib

    $TOMCAT_HOME/bin/startup.sh

    # Sleep for a little while so the server comes up
    sleep 20
    TOMCAT_PID=`ps -ef | grep java | grep -v grep | awk '{print $2}' `
    echo $TOMCAT_PID > $PIDFILE

    ;;

  stop)

    kill -9 `cat $PIDFILE`
    rm -f $PIDFILE
    ;;

  *)
    echo "Usage: ctl {start|stop}" ;;

esac
